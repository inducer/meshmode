[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "meshmode"
version = "2024.0"
description = "High-order polynomial discretizations of and on meshes"
readme = "README.rst"
license = "MIT"
authors = [
    { name = "Andreas Kloeckner", email = "inform@tiker.net" },
]
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Other Audience",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Software Development :: Libraries",
    "Topic :: Utilities",
]
dependencies = [
    "arraycontext>=2021.1",
    "gmsh-interop>=2021.1",
    "loopy>=2024.1",
    "modepy>=2021.1",
    "numpy",
    "pymbolic>=2022.2",
    "pytools>=2025.2",
    "recursivenodes",
    "typing_extensions>=4.10",
]

[project.optional-dependencies]
doc = [
    "furo",
    "sphinx>=4",
    "sphinx-copybutton",
]
test = [
    "pylint",
    "pytest",
    "ruff",
]
visualization = [
    "h5py",
    "pyvisfile>=2022.1",
]

[project.urls]
Documentation = "https://documen.tician.de/meshmode"
Repository = "https://github.com/inducer/meshmode"

[tool.hatch.build.targets.sdist]
exclude = [
  "/.git*",
  "/doc/_build",
  "/.editorconfig",
  "/run-*.sh",
  "/.basedpyright",
]

[tool.ruff]
preview = true

[tool.ruff.lint]
extend-select = [
    "B",    # flake8-bugbear
    "C",    # flake8-comprehensions
    "E",    # pycodestyle
    "F",    # pyflakes
    "G",    # flake8-logging-format
    "I",    # flake8-isort
    "N",    # pep8-naming
    "NPY",  # numpy
    "Q",    # flake8-quotes
    "RUF",  # ruff
    "UP",   # pyupgrade
    "W",    # pycodestyle
    "TC",
]
extend-ignore = [
    "C90",  # McCabe complexity
    "E226", # missing whitespace around arithmetic operator
    "E241", # multiple spaces after comma
    "E242", # tab after comma
    "E265", # comment should have a space
    "E402", # module level import not at the top of file
    "N802", # function name should be lowercase
    "N803", # argument name should be lowercase
    "N806", # variable name should be lowercase
    "N818", # error suffix in exception names
    "UP031", # use f-strings instead of % format
    "UP032", # use f-strings instead of .format
]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = [
    "pytools",
    "pyopencl",
    "loopy",
    "arraycontext",
    "gmsh_interop",
    "pyvisfile",
    "modepy",
    "pytato",
    "pymbolic",
    "pymetis",
    "firedrake",
]
known-local-folder = [
    "meshmode",
]
lines-after-imports = 2
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"examples/*.py" = ["I002"]
"doc/conf.py" = ["I002"]

[tool.pytest.ini_options]
markers = [
    "mpi: test requires MPI",
    "octave: test requires Octave",
]

[tool.typos.default]
extend-ignore-re = [
  "(?Rm)^.*(#|//)\\s*spellchecker:\\s*disable-line$"
]

[tool.typos.default.extend-words]
# as in pt_typ, an import only used for type checking
"typ" = "typ"

"PN" = "PN"
"nd" = "nd"
# TODO: needed by deprecated MPIMeshDistributor.is_mananger_rank
"mananger" = "mananger"

[tool.basedpyright]
pythonVersion = "3.10"
pythonPlatform = "All"

reportImplicitStringConcatenation = "none"
reportUnnecessaryIsInstance = "none"
reportUnusedCallResult = "none"
reportExplicitAny = "none"
reportUnusedParameter = "hint"

reportPrivateUsage = "hint"
reportAny = "none"
reportUnreachable = "hint"

# This reports even cycles that are qualified by 'if TYPE_CHECKING'. Not what
# we care about at this moment.
# https://github.com/microsoft/pyright/issues/746
reportImportCycles = "none"

ignore = [
    "doc/conf.py",
]

[[tool.basedpyright.executionEnvironments]]
root = "test"
reportArgumentType = "hint"
reportAttributeAccessIssue = "hint"
reportMissingImports = "none"
reportMissingParameterType = "none"
reportMissingTypeStubs = "none"
reportUnknownArgumentType = "none"
reportUnknownMemberType = "hint"
reportUnknownParameterType = "none"
reportUnknownVariableType = "none"
reportUnknownLambdaType = "hint"
reportOperatorIssue = "hint"
reportPossiblyUnboundVariable = "hint"
reportPrivateUsage = "none"
reportUnusedImport = "hint"


[[tool.basedpyright.executionEnvironments]]
root = "examples"
reportArgumentType = "hint"
reportAttributeAccessIssue = "hint"
reportMissingImports = "none"
reportMissingParameterType = "none"
reportMissingTypeStubs = "none"
reportUnknownArgumentType = "none"
reportUnknownMemberType = "hint"
reportUnknownParameterType = "none"
reportUnknownVariableType = "none"
reportUnknownLambdaType = "hint"
reportOperatorIssue = "hint"
reportPossiblyUnboundVariable = "hint"
reportPrivateUsage = "none"

reportGeneralTypeIssues = "hint"

[[tool.basedpyright.executionEnvironments]]
root = "meshmode/interop/firedrake"
reportMissingImports = "none"
reportCallIssue = "hint"
reportArgumentType = "hint"

[[tool.basedpyright.executionEnvironments]]
root = "meshmode/interop/nodal_dg.py"
reportMissingImports = "none"
reportOptionalMemberAccess = "none"
reportOptionalSubscript = "none"

[[tool.basedpyright.executionEnvironments]]
root = "meshmode/discretization/visualization.py"
reportMissingImports = "none"
